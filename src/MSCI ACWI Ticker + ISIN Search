import requests
import pandas as pd
from io import BytesIO
import time
import re

# OpenFIGI API key (make sure this key is valid)
API_KEY = "5ac65a24-de1a-431e-ab4c-8549b39f88ee"  # Replace with your valid API Key

# URL of the CSV file (ACWI ETF holdings)
url = "https://www.ishares.com/us/products/239600/ishares-msci-acwi-etf/1467271812596.ajax?fileType=csv&fileName=ACWI_holdings&dataType=fund"


# Function to query OpenFIGI API and fetch ticker using ISIN
def get_ticker_from_isin(isin):
    url = "https://api.openfigi.com/v3/mapping"
    headers = {
        "Content-Type": "application/json",
        "X-OPENFIGI-APIKEY": API_KEY
    }
    data = [{"idType": "ID_ISIN", "idValue": isin}]

    try:
        # Make the POST request to OpenFIGI API
        response = requests.post(url, json=data, headers=headers)

        # Handle rate-limiting with retries
        while response.status_code == 429:
            print(f"Rate limited for {isin}, retrying in 3 seconds...")
            time.sleep(3)
            response = requests.post(url, json=data, headers=headers)

        # Check if the request was successful (status code 200)
        if response.status_code == 200:
            results = response.json()
            if results and "data" in results[0] and results[0]["data"]:
                # Search for ticker in the response
                return results[0]["data"][0].get("ticker")
            else:
                print(f"Ticker not found for ISIN {isin}")
                return "NA"
        else:
            # Handle failed requests (non-200 status codes)
            print(f"Error fetching data for ISIN {isin}, status code: {response.status_code}")
            return "NA"
    except Exception as e:
        print(f"Error for ISIN {isin}: {e}")
        return "NA"


# Main script to fetch and process the data
response = requests.get(url)

if response.status_code == 200:
    # Save the CSV file to disk (optional)
    with open('ACWI_holdings.csv', 'wb') as f:
        f.write(response.content)

    # Load the content into a Pandas DataFrame
    file_content = BytesIO(response.content)

    # Read the CSV file into a DataFrame, specifying that the headers are on row 10 (0-indexed: row 9)
    df = pd.read_csv(file_content, header=9)

    # Filter the rows where the 'Asset Class' column is equal to 'Equity'
    df_filtered = df[df['Asset Class'] == 'Equity']

    # Select the first two columns (Ticker and Name)
    df_filtered = df_filtered.iloc[:, [0, 1]]  # Assuming first column is ticker, second is name


    # Function to check if the input is a valid ISIN
    def is_valid_isin(isin):
        # Check if the ISIN format is valid: 2 letters followed by any combination of letters or digits for the next 10 characters (12 characters in total)
        if len(isin) == 12 and isin[:2].isalpha() and all(c.isalnum() for c in isin[2:]):
            return True
        return False

    # Function to process user input (ISIN, Ticker, or Company Name)
    def process_input(query):
        # Check if the query is a valid ISIN
        if is_valid_isin(query):
            ticker = get_ticker_from_isin(query)
            if ticker != "NA":
                print(f"ISIN {query} corresponds to Ticker: {ticker}")
                # Find the row for the ticker in the filtered data
                if ticker in df_filtered['Ticker'].values:
                    row = df_filtered[df_filtered['Ticker'] == ticker].index[0]
                    print(f"Ticker: {ticker}, Row Number: {row + 1}, Name: {df_filtered.loc[row, 'Name']}")
                else:
                    print(f"Ticker {ticker} not found in the filtered data.")
            else:
                print(f"ISIN {query} not found.")

        # If the query is a Ticker
        elif query in df_filtered['Ticker'].values:
            row = df_filtered[df_filtered['Ticker'] == query].index[0]
            print(f"Ticker: {query}, Row Number: {row + 1}, Name: {df_filtered.loc[row, 'Name']}")

        # If the query is a Company Name
        elif query in df_filtered['Name'].values:
            row = df_filtered[df_filtered['Name'] == query].index[0]
            ticker = df_filtered.loc[row, 'Ticker']
            print(f"Company: {query}, Row Number: {row + 1}, Ticker: {ticker}")

        else:
            print("Query not found in the filtered data.")


    # Ask the user for input
    user_input = input("Enter ISIN, Ticker, or Company Name: ").strip()
    process_input(user_input)

else:
    print("Failed to download the file. Status code:", response.status_code)
